{
  "api/FNNLib.Backend.html": {
    "href": "api/FNNLib.Backend.html",
    "title": "Namespace FNNLib.Backend | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Backend Classes NetworkClient NetworkServer The NetworkServer class manages sending data to the clients. This is normally controlled by the NetworkManager and most games won't access this at all. This is only accessed if you wish to register custom packet types. TODO: Clean this messy pile of spaghetti"
  },
  "api/FNNLib.Backend.NetworkClient.html": {
    "href": "api/FNNLib.Backend.NetworkClient.html",
    "title": "Class NetworkClient | Friday Night Networking Library",
    "keywords": "Class NetworkClient Inheritance Object PacketHandler NetworkClient Inherited Members PacketHandler.HandlePacket(UInt64, ArraySegment<Byte>, Int32) PacketHandler.RegisterPacketHandler<T>(Action<UInt64, T>) PacketHandler.ClearPacketHandler<T>() Namespace : FNNLib.Backend Assembly : FNNLib.dll Syntax public class NetworkClient : PacketHandler Constructors | Improve this Doc View Source NetworkClient(UInt64) Creates a network client with the given protocol version. Declaration public NetworkClient(ulong protocolVersion) Parameters Type Name Description UInt64 protocolVersion Client protocol version. Fields | Improve this Doc View Source instance The current NetworkClient Declaration public static NetworkClient instance Field Value Type Description NetworkClient | Improve this Doc View Source onConnected Fired when the client is approved by the server. Declaration public UnityEvent onConnected Field Value Type Description UnityEvent | Improve this Doc View Source onDisconnected Fired when the client is disconnected from the server, either by choice or by the server. If disconnected by choice, reason is null. Comes with a reason parameter. Declaration public UnityEvent<string> onDisconnected Field Value Type Description UnityEvent < String > Properties | Improve this Doc View Source isServerContext Mark as client context for packet management. Declaration protected override bool isServerContext { get; } Property Value Type Description Boolean Overrides PacketHandler.isServerContext | Improve this Doc View Source localClientID This client's ID on the server. Declaration public ulong localClientID { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Connect(Transport, String, Byte[]) Connect the client to a server. Declaration public void Connect(Transport transport, string hostname, byte[] connectionRequestData = null) Parameters Type Name Description Transport transport String hostname The server hostname Byte [] connectionRequestData Additional connection data used by the server approval phase. | Improve this Doc View Source ConnectVirtual() Declaration public void ConnectVirtual() | Improve this Doc View Source Disconnect() Declaration public void Disconnect() | Improve this Doc View Source Send<T>(T, Int32) Send a packet to the server. Declaration public void Send<T>(T packet, int channelID = 0) where T : IPacket, new() Parameters Type Name Description T packet Int32 channelID Type Parameters Name Description T Exceptions Type Condition InvalidOperationException Thrown when the packet is not marked ServerPacket."
  },
  "api/FNNLib.Backend.NetworkServer.html": {
    "href": "api/FNNLib.Backend.NetworkServer.html",
    "title": "Class NetworkServer | Friday Night Networking Library",
    "keywords": "Class NetworkServer The NetworkServer class manages sending data to the clients. This is normally controlled by the NetworkManager and most games won't access this at all. This is only accessed if you wish to register custom packet types. TODO: Clean this messy pile of spaghetti Inheritance Object PacketHandler NetworkServer Inherited Members PacketHandler.HandlePacket(UInt64, ArraySegment<Byte>, Int32) PacketHandler.RegisterPacketHandler<T>(Action<UInt64, T>) PacketHandler.ClearPacketHandler<T>() Namespace : FNNLib.Backend Assembly : FNNLib.dll Syntax public class NetworkServer : PacketHandler Constructors | Improve this Doc View Source NetworkServer(UInt64) Declaration public NetworkServer(ulong protocolVersion) Parameters Type Name Description UInt64 protocolVersion Fields | Improve this Doc View Source instance The currently running server, if any. Check if a server is running with the IsServerRunning static property. Declaration public static NetworkServer instance Field Value Type Description NetworkServer | Improve this Doc View Source onClientConnected Fired when a client's connection to the server has been accepted. Declaration public UnityEvent<ulong> onClientConnected Field Value Type Description UnityEvent < UInt64 > | Improve this Doc View Source onClientDisconnected Fired when a client's connection is denied Declaration public UnityEvent<ulong> onClientDisconnected Field Value Type Description UnityEvent < UInt64 > | Improve this Doc View Source onServerStarted Server started event. Raised just after the server is started. Declaration public UnityEvent<NetworkServer> onServerStarted Field Value Type Description UnityEvent < NetworkServer > | Improve this Doc View Source onServerStopped Server stopped event. Raised after the server is closed and clients are disconnected. Declaration public UnityEvent<NetworkServer> onServerStopped Field Value Type Description UnityEvent < NetworkServer > Properties | Improve this Doc View Source isServerContext Mark as server context for packet management. Declaration protected override bool isServerContext { get; } Property Value Type Description Boolean Overrides PacketHandler.isServerContext | Improve this Doc View Source isServerRunning Whether or not a server is running. Declaration public static bool isServerRunning { get; } Property Value Type Description Boolean | Improve this Doc View Source running Whether or not this server is running. Declaration public bool running { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Disconnect(UInt64, String) Disconnect a client from the server. Declaration public void Disconnect(ulong clientID, string disconnectReason) Parameters Type Name Description UInt64 clientID The client to be disconnected. String disconnectReason The client disconnect reason. Will be provided to the client on disconnect. | Improve this Doc View Source Send<T>(List<UInt64>, T, Int32) Broadcast a packet to a list of clients. Declaration public void Send<T>(List<ulong> clients, T packet, int channelID = 0) where T : IPacket Parameters Type Name Description List < UInt64 > clients Clients to receive the packet. T packet The packet to broadcast. Int32 channelID The channel to send the message with. Type Parameters Name Description T Exceptions Type Condition InvalidOperationException Thrown when the packet is not marked ClientPacket. | Improve this Doc View Source Send<T>(UInt64, T, Int32) Send a packet to a specific client. Declaration public void Send<T>(ulong clientID, T packet, int channelID = 0) where T : IPacket Parameters Type Name Description UInt64 clientID Target client T packet The packet to send Int32 channelID The channel to send the message with. Type Parameters Name Description T Exceptions Type Condition InvalidOperationException Thrown when the packet is not marked ClientPacket. | Improve this Doc View Source SendToAll<T>(T, Int32) Broadcast a packet to every connected client. Declaration public void SendToAll<T>(T packet, int channelID = 0) where T : IPacket Parameters Type Name Description T packet The packet to broadcast. Int32 channelID The channel to send the message with. Type Parameters Name Description T Exceptions Type Condition InvalidOperationException Thrown when the packet is not marked ClientPacket. | Improve this Doc View Source Start(Transport) Start the server. Declaration public void Start(Transport transport) Parameters Type Name Description Transport transport Exceptions Type Condition NotSupportedException Thrown if a server is already running. | Improve this Doc View Source Stop() Stop the server. Declaration public void Stop() Exceptions Type Condition NotSupportedException Thrown if a server is not running."
  },
  "api/FNNLib.Components.html": {
    "href": "api/FNNLib.Components.html",
    "title": "Namespace FNNLib.Components | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Components Classes ScenePackingVisualizer"
  },
  "api/FNNLib.Components.ScenePackingVisualizer.html": {
    "href": "api/FNNLib.Components.ScenePackingVisualizer.html",
    "title": "Class ScenePackingVisualizer | Friday Night Networking Library",
    "keywords": "Class ScenePackingVisualizer Inheritance Object ScenePackingVisualizer Namespace : FNNLib.Components Assembly : FNNLib.dll Syntax public class ScenePackingVisualizer : MonoBehaviour Fields | Improve this Doc View Source packingData Declaration public ScenePackingData packingData Field Value Type Description ScenePackingData"
  },
  "api/FNNLib.Config.HashSize.html": {
    "href": "api/FNNLib.Config.HashSize.html",
    "title": "Enum HashSize | Friday Night Networking Library",
    "keywords": "Enum HashSize Namespace : FNNLib.Config Assembly : FNNLib.dll Syntax public enum HashSize Fields Name Description EightBytes FourBytes TwoBytes"
  },
  "api/FNNLib.Config.html": {
    "href": "api/FNNLib.Config.html",
    "title": "Namespace FNNLib.Config | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Config Classes NetworkConfig NetworkPrefab Enums HashSize"
  },
  "api/FNNLib.Config.NetworkConfig.html": {
    "href": "api/FNNLib.Config.NetworkConfig.html",
    "title": "Class NetworkConfig | Friday Night Networking Library",
    "keywords": "Class NetworkConfig Inheritance Object NetworkConfig Namespace : FNNLib.Config Assembly : FNNLib.dll Syntax [Serializable] public class NetworkConfig Fields | Improve this Doc View Source connectionRequestTimeout The number of seconds to wait for a client to request connection before dropping them. Declaration public int connectionRequestTimeout Field Value Type Description Int32 | Improve this Doc View Source disconnectRequestTimeout The number of seconds to wait for a client to acknowledge a disconnection request before dropping them. Declaration public int disconnectRequestTimeout Field Value Type Description Int32 | Improve this Doc View Source initialScene The initial starting scene. If left blank, it will use the scene when StartServer/StartHost is called. Declaration public string initialScene Field Value Type Description String | Improve this Doc View Source networkableScenes The list of scenes that the server is permitted to send the client to. Used for security purposes if you opt to use the NetworkSceneManager (recommended). Declaration public List<NetworkableScene> networkableScenes Field Value Type Description List < NetworkableScene > | Improve this Doc View Source networkedPrefabs List of all networked prefabs. Declaration public List<NetworkPrefab> networkedPrefabs Field Value Type Description List < NetworkPrefab > | Improve this Doc View Source packetIDHashSize The hash size used for packet IDs. Only change if you are having collision problems. Declaration public HashSize packetIDHashSize Field Value Type Description HashSize | Improve this Doc View Source protocolVersion The protocol version. This prevents cross-version communication. You can however keep the protocol version the same if a minor bugfix or change is done that doesn't affect gameplay. Declaration public ushort protocolVersion Field Value Type Description UInt16 | Improve this Doc View Source rpcHashSize The hash size for rpc method names. Only change if you are having collision problems. Declaration public HashSize rpcHashSize Field Value Type Description HashSize | Improve this Doc View Source serverTickRate (Dedicated) server update frequency. Declaration public int serverTickRate Field Value Type Description Int32 | Improve this Doc View Source transport The transport to use. Declaration public Transport transport Field Value Type Description Transport Methods | Improve this Doc View Source GetHash(Boolean) Declaration public ulong GetHash(bool cache = true) Parameters Type Name Description Boolean cache Returns Type Description UInt64"
  },
  "api/FNNLib.Config.NetworkPrefab.html": {
    "href": "api/FNNLib.Config.NetworkPrefab.html",
    "title": "Class NetworkPrefab | Friday Night Networking Library",
    "keywords": "Class NetworkPrefab Inheritance Object NetworkPrefab Namespace : FNNLib.Config Assembly : FNNLib.dll Syntax [Serializable] public class NetworkPrefab Fields | Improve this Doc View Source prefab The prefab. Declaration public GameObject prefab Field Value Type Description GameObject"
  },
  "api/FNNLib.ConnectedClient.html": {
    "href": "api/FNNLib.ConnectedClient.html",
    "title": "Class ConnectedClient | Friday Night Networking Library",
    "keywords": "Class ConnectedClient Inheritance Object ConnectedClient Namespace : FNNLib Assembly : FNNLib.dll Syntax public class ConnectedClient Fields | Improve this Doc View Source clientID Declaration public ulong clientID Field Value Type Description UInt64 | Improve this Doc View Source ownedObjects Declaration public readonly List<ulong> ownedObjects Field Value Type Description List < UInt64 > | Improve this Doc View Source playerObject Declaration public ulong playerObject Field Value Type Description UInt64 | Improve this Doc View Source sceneID Declaration public uint sceneID Field Value Type Description UInt32"
  },
  "api/FNNLib.Editor.html": {
    "href": "api/FNNLib.Editor.html",
    "title": "Namespace FNNLib.Editor | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Editor Classes NetworkIdentityEditor NetworkManagerEditor ScenePostProcessing"
  },
  "api/FNNLib.Editor.NetworkIdentityEditor.html": {
    "href": "api/FNNLib.Editor.NetworkIdentityEditor.html",
    "title": "Class NetworkIdentityEditor | Friday Night Networking Library",
    "keywords": "Class NetworkIdentityEditor Inheritance Object NetworkIdentityEditor Namespace : FNNLib.Editor Assembly : FNNLib.Editor.dll Syntax public class NetworkIdentityEditor : UnityEditor.Editor Methods | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/FNNLib.Editor.NetworkManagerEditor.html": {
    "href": "api/FNNLib.Editor.NetworkManagerEditor.html",
    "title": "Class NetworkManagerEditor | Friday Night Networking Library",
    "keywords": "Class NetworkManagerEditor Inheritance Object NetworkManagerEditor Namespace : FNNLib.Editor Assembly : FNNLib.Editor.dll Syntax public class NetworkManagerEditor : UnityEditor.Editor Methods | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/FNNLib.Editor.ScenePostProcessing.html": {
    "href": "api/FNNLib.Editor.ScenePostProcessing.html",
    "title": "Class ScenePostProcessing | Friday Night Networking Library",
    "keywords": "Class ScenePostProcessing Inheritance Object ScenePostProcessing Namespace : FNNLib.Editor Assembly : FNNLib.Editor.dll Syntax public class ScenePostProcessing Methods | Improve this Doc View Source ProcessScene() Declaration public static void ProcessScene()"
  },
  "api/FNNLib.html": {
    "href": "api/FNNLib.html",
    "title": "Namespace FNNLib | Friday Night Networking Library",
    "keywords": "Namespace FNNLib Classes ConnectedClient NetworkBehaviour NetworkIdentity NetworkManager The network manager drives the NetworkClient and NetworkServer systems. TODO: Make more of this virtual so that custom network managers could be made? Do we actually need this given its functionality/openness? TODO: Allow changing hash strength."
  },
  "api/FNNLib.Messaging.ClientPacketAttribute.html": {
    "href": "api/FNNLib.Messaging.ClientPacketAttribute.html",
    "title": "Class ClientPacketAttribute | Friday Night Networking Library",
    "keywords": "Class ClientPacketAttribute Denotes a packet that is handled on the client. Inheritance Object Attribute ClientPacketAttribute Namespace : FNNLib.Messaging Assembly : FNNLib.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ClientPacketAttribute : Attribute, _Attribute"
  },
  "api/FNNLib.Messaging.html": {
    "href": "api/FNNLib.Messaging.html",
    "title": "Namespace FNNLib.Messaging | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Messaging Classes ClientPacketAttribute Denotes a packet that is handled on the client. PacketHandler PacketUtils ServerPacketAttribute Denotes a packet that is handled on the server. Interfaces IPacket Delegates NetworkPacketDelegate"
  },
  "api/FNNLib.Messaging.IPacket.html": {
    "href": "api/FNNLib.Messaging.IPacket.html",
    "title": "Interface IPacket | Friday Night Networking Library",
    "keywords": "Interface IPacket Namespace : FNNLib.Messaging Assembly : FNNLib.dll Syntax public interface IPacket Methods | Improve this Doc View Source DeSerialize(NetworkReader) Declaration void DeSerialize(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source Serialize(NetworkWriter) Declaration void Serialize(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer"
  },
  "api/FNNLib.Messaging.NetworkPacketDelegate.html": {
    "href": "api/FNNLib.Messaging.NetworkPacketDelegate.html",
    "title": "Delegate NetworkPacketDelegate | Friday Night Networking Library",
    "keywords": "Delegate NetworkPacketDelegate Namespace : FNNLib.Messaging Assembly : FNNLib.dll Syntax public delegate void NetworkPacketDelegate(ulong clientID, NetworkReader reader); Parameters Type Name Description UInt64 clientID NetworkReader reader"
  },
  "api/FNNLib.Messaging.PacketHandler.html": {
    "href": "api/FNNLib.Messaging.PacketHandler.html",
    "title": "Class PacketHandler | Friday Night Networking Library",
    "keywords": "Class PacketHandler Inheritance Object PacketHandler NetworkClient NetworkServer Namespace : FNNLib.Messaging Assembly : FNNLib.dll Syntax public abstract class PacketHandler Properties | Improve this Doc View Source isServerContext If this is a server context, packets must have the ServerPacket attribute. Otherwise it must have ClientPacket. A packet can have both. Declaration protected abstract bool isServerContext { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ClearPacketHandler<T>() Clear the packet handler for a given packet type. Declaration public void ClearPacketHandler<T>() where T : IPacket, new() Type Parameters Name Description T The packet type to clear. Exceptions Type Condition InvalidOperationException Thrown if a handler does not exist for this packet. | Improve this Doc View Source HandlePacket(UInt64, ArraySegment<Byte>, Int32) Handle an incoming packet. Declaration protected void HandlePacket(ulong sender, ArraySegment<byte> data, int channelID) Parameters Type Name Description UInt64 sender The senders ID (0 for server). ArraySegment < Byte > data The data containing the packet. Int32 channelID | Improve this Doc View Source RegisterPacketHandler<T>(Action<UInt64, T>) Register a packet handler. Declaration public void RegisterPacketHandler<T>(Action<ulong, T> handler) where T : IPacket, new() Parameters Type Name Description Action < UInt64 , T> handler The handler to control this packet Type Parameters Name Description T The packet type to be handled. Exceptions Type Condition InvalidOperationException Thrown if a packet name/hash conflict occurs."
  },
  "api/FNNLib.Messaging.PacketUtils.html": {
    "href": "api/FNNLib.Messaging.PacketUtils.html",
    "title": "Class PacketUtils | Friday Night Networking Library",
    "keywords": "Class PacketUtils Inheritance Object PacketUtils Namespace : FNNLib.Messaging Assembly : FNNLib.dll Syntax public static class PacketUtils Methods | Improve this Doc View Source GetID<T>() Gets a packet ID from the type's name hash. Declaration [Obsolete(\"Use GetID32 instead.\")] public static uint GetID<T>() where T : IPacket Returns Type Description UInt32 The packet's ID. Type Parameters Name Description T The packet type. | Improve this Doc View Source GetID16<T>() Declaration public static ushort GetID16<T>() where T : IPacket Returns Type Description UInt16 Type Parameters Name Description T | Improve this Doc View Source GetID32<T>() Declaration public static uint GetID32<T>() where T : IPacket Returns Type Description UInt32 Type Parameters Name Description T | Improve this Doc View Source GetID64<T>() Declaration public static ulong GetID64<T>() where T : IPacket Returns Type Description UInt64 Type Parameters Name Description T | Improve this Doc View Source IsClientPacket<T>() Determine if this packet is run on the client. Declaration public static bool IsClientPacket<T>() Returns Type Description Boolean Whether the packet can be sent to the client. Type Parameters Name Description T The packet type. | Improve this Doc View Source IsServerPacket<T>() Determine if this packet is run on the server. Declaration public static bool IsServerPacket<T>() Returns Type Description Boolean Whether the packet can be sent to the server. Type Parameters Name Description T The packet type."
  },
  "api/FNNLib.Messaging.ServerPacketAttribute.html": {
    "href": "api/FNNLib.Messaging.ServerPacketAttribute.html",
    "title": "Class ServerPacketAttribute | Friday Night Networking Library",
    "keywords": "Class ServerPacketAttribute Denotes a packet that is handled on the server. Inheritance Object Attribute ServerPacketAttribute Namespace : FNNLib.Messaging Assembly : FNNLib.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ServerPacketAttribute : Attribute, _Attribute"
  },
  "api/FNNLib.NetworkBehaviour.html": {
    "href": "api/FNNLib.NetworkBehaviour.html",
    "title": "Class NetworkBehaviour | Friday Night Networking Library",
    "keywords": "Class NetworkBehaviour Inheritance Object NetworkBehaviour Namespace : FNNLib Assembly : FNNLib.dll Syntax public class NetworkBehaviour : MonoBehaviour Properties | Improve this Doc View Source hasIdentity Declaration public bool hasIdentity { get; } Property Value Type Description Boolean | Improve this Doc View Source identity Declaration public NetworkIdentity identity { get; } Property Value Type Description NetworkIdentity | Improve this Doc View Source isClient Is running in a client context? Declaration public bool isClient { get; } Property Value Type Description Boolean | Improve this Doc View Source isLocalPlayer Declaration public bool isLocalPlayer { get; } Property Value Type Description Boolean | Improve this Doc View Source isOwnedByServer Declaration public bool isOwnedByServer { get; } Property Value Type Description Boolean | Improve this Doc View Source isOwner Declaration public bool isOwner { get; } Property Value Type Description Boolean | Improve this Doc View Source isServer Is running in a server context? Declaration public bool isServer { get; } Property Value Type Description Boolean | Improve this Doc View Source isSpawned Declaration public bool isSpawned { get; } Property Value Type Description Boolean | Improve this Doc View Source networkID Declaration public ulong networkID { get; } Property Value Type Description UInt64 | Improve this Doc View Source networkScene Declaration public NetworkScene networkScene { get; } Property Value Type Description NetworkScene | Improve this Doc View Source networkSceneID Declaration public uint networkSceneID { get; } Property Value Type Description UInt32 | Improve this Doc View Source ownerClientID Declaration public ulong ownerClientID { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source NetInstantiate(GameObject, Vector3, Quaternion) Declaration public GameObject NetInstantiate(GameObject go, Vector3 position, Quaternion rotation) Parameters Type Name Description GameObject go Vector3 position Quaternion rotation Returns Type Description GameObject"
  },
  "api/FNNLib.NetworkIdentity.html": {
    "href": "api/FNNLib.NetworkIdentity.html",
    "title": "Class NetworkIdentity | Friday Night Networking Library",
    "keywords": "Class NetworkIdentity Inheritance Object NetworkIdentity Namespace : FNNLib Assembly : FNNLib.dll Syntax public class NetworkIdentity : MonoBehaviour Fields | Improve this Doc View Source prefabHash Declaration public ulong prefabHash Field Value Type Description UInt64 | Improve this Doc View Source prefabHashGenerator The prefab hash generator Declaration public string prefabHashGenerator Field Value Type Description String | Improve this Doc View Source sceneInstanceID Unique identifier for this object in the scene. Only used if this is a scene object. Do not set this value yourself! Declaration public ulong sceneInstanceID Field Value Type Description UInt64 Properties | Improve this Doc View Source isLocalPlayer Whether or not this is the local player's player object. Declaration public bool isLocalPlayer { get; } Property Value Type Description Boolean | Improve this Doc View Source isOwnedByServer Declaration public bool isOwnedByServer { get; } Property Value Type Description Boolean | Improve this Doc View Source isOwner Whether or not the local player has ownership over this object. Declaration public bool isOwner { get; } Property Value Type Description Boolean | Improve this Doc View Source isPlayerObject Whether or not this object is the player object for a client. Declaration public bool isPlayerObject { get; } Property Value Type Description Boolean | Improve this Doc View Source isSceneObject Whether or not this object was spawned with the scene. Declaration public bool? isSceneObject { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source isSpawned Whether or not the object is spawned on the network. Declaration public bool isSpawned { get; } Property Value Type Description Boolean | Improve this Doc View Source networkID The network ID of this object in the scene. Declaration public ulong networkID { get; } Property Value Type Description UInt64 | Improve this Doc View Source networkScene The network scene this object resides in. Declaration public NetworkScene networkScene { get; } Property Value Type Description NetworkScene | Improve this Doc View Source networkSceneID The scene that this object is in. Declaration public uint networkSceneID { get; } Property Value Type Description UInt32 | Improve this Doc View Source ownerClientID The client ID of the owner. Declaration public ulong ownerClientID { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source AddObserver(UInt64) Declaration public void AddObserver(ulong clientID) Parameters Type Name Description UInt64 clientID | Improve this Doc View Source ChangeOwnership(UInt64) Declaration public void ChangeOwnership(ulong newOwnerClientID) Parameters Type Name Description UInt64 newOwnerClientID | Improve this Doc View Source IsObserving(UInt64) Declaration public bool IsObserving(ulong clientID) Parameters Type Name Description UInt64 clientID Returns Type Description Boolean | Improve this Doc View Source RemoveObserver(UInt64) Declaration public void RemoveObserver(ulong clientID) Parameters Type Name Description UInt64 clientID | Improve this Doc View Source RemoveOwnership() Declaration public void RemoveOwnership() | Improve this Doc View Source Spawn() Declaration public void Spawn() | Improve this Doc View Source SpawnAsPlayerObject(UInt64) Declaration public void SpawnAsPlayerObject(ulong clientID) Parameters Type Name Description UInt64 clientID | Improve this Doc View Source SpawnWithOwnership(UInt64) Declaration public void SpawnWithOwnership(ulong clientID) Parameters Type Name Description UInt64 clientID | Improve this Doc View Source UnSpawn() Declaration public void UnSpawn()"
  },
  "api/FNNLib.NetworkManager.html": {
    "href": "api/FNNLib.NetworkManager.html",
    "title": "Class NetworkManager | Friday Night Networking Library",
    "keywords": "Class NetworkManager The network manager drives the NetworkClient and NetworkServer systems. TODO: Make more of this virtual so that custom network managers could be made? Do we actually need this given its functionality/openness? TODO: Allow changing hash strength. Inheritance Object NetworkManager Namespace : FNNLib Assembly : FNNLib.dll Syntax public class NetworkManager : MonoBehaviour Fields | Improve this Doc View Source connectedClients Declaration public readonly Dictionary<ulong, ConnectedClient> connectedClients Field Value Type Description Dictionary < UInt64 , ConnectedClient > | Improve this Doc View Source connectedClientsList Declaration public readonly List<ConnectedClient> connectedClientsList Field Value Type Description List < ConnectedClient > | Improve this Doc View Source dontDestroyOnLoad Whether or not to move the manager to the DontDestroyOnLoad Scene. Declaration public bool dontDestroyOnLoad Field Value Type Description Boolean | Improve this Doc View Source instance The game's NetworkManager. Declaration public static NetworkManager instance Field Value Type Description NetworkManager | Improve this Doc View Source networkConfig The network config. Declaration public NetworkConfig networkConfig Field Value Type Description NetworkConfig | Improve this Doc View Source runInBackground Whether or not the application should run in the background while networking is running. Will be reset once the client/server is finished. Declaration public bool runInBackground Field Value Type Description Boolean Properties | Improve this Doc View Source isClient Whether or not the game should run clientside code. Declaration public bool isClient { get; } Property Value Type Description Boolean | Improve this Doc View Source isHost Whether or not the client is a virtual client. Declaration public bool isHost { get; } Property Value Type Description Boolean | Improve this Doc View Source isServer Whether or not the game should run serverside code. Declaration public bool isServer { get; } Property Value Type Description Boolean | Improve this Doc View Source localClientID The local client ID. Declaration public ulong localClientID { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source ConfigureServerFramerate() Declaration protected virtual void ConfigureServerFramerate() | Improve this Doc View Source RegisterPacketHandler<T>(Action<UInt64, T>) Registers a packet on the client and server, depending on it's target. Declaration public void RegisterPacketHandler<T>(Action<ulong, T> handler) where T : IPacket, new() Parameters Type Name Description Action < UInt64 , T> handler Type Parameters Name Description T | Improve this Doc View Source StartClient(String, Byte[]) Start the manager in client mode. Declaration public void StartClient(string hostname, byte[] connectionRequestData = null) Parameters Type Name Description String hostname The hostname of the server to connect to. Byte [] connectionRequestData Connection request data used for the approval stage. Exceptions Type Condition NotSupportedException | Improve this Doc View Source StartHost() Declaration public void StartHost() | Improve this Doc View Source StartServer() Starts the manager in server mode. Declaration public void StartServer() | Improve this Doc View Source StopClient() Stop client mode Declaration public void StopClient() Exceptions Type Condition NotSupportedException Thrown if running in a different mode, or a client isn't running. | Improve this Doc View Source StopHost() Declaration public void StopHost() | Improve this Doc View Source StopServer() Stop a running server. Declaration public void StopServer() Exceptions Type Condition NotSupportedException"
  },
  "api/FNNLib.SceneManagement.html": {
    "href": "api/FNNLib.SceneManagement.html",
    "title": "Namespace FNNLib.SceneManagement | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.SceneManagement Classes NetworkScene NetworkScene controls the scene's network presence, and the presence of its network objects. NetworkSceneManager This manages the scenes across the network. You can only change the scene using the server. On the client, it deals with the scene change packets. When a client joins the server, it will always join into the active scene. If building a party game, ensure the main scene is the lobby. ScenePackingData Structs NetworkableScene"
  },
  "api/FNNLib.SceneManagement.NetworkableScene.html": {
    "href": "api/FNNLib.SceneManagement.NetworkableScene.html",
    "title": "Struct NetworkableScene | Friday Night Networking Library",
    "keywords": "Struct NetworkableScene Namespace : FNNLib.SceneManagement Assembly : FNNLib.dll Syntax [Serializable] public struct NetworkableScene Fields | Improve this Doc View Source sceneName Declaration public string sceneName Field Value Type Description String | Improve this Doc View Source scenePackingData Declaration public ScenePackingData scenePackingData Field Value Type Description ScenePackingData"
  },
  "api/FNNLib.SceneManagement.NetworkScene.html": {
    "href": "api/FNNLib.SceneManagement.NetworkScene.html",
    "title": "Class NetworkScene | Friday Night Networking Library",
    "keywords": "Class NetworkScene NetworkScene controls the scene's network presence, and the presence of its network objects. Inheritance Object NetworkScene Namespace : FNNLib.SceneManagement Assembly : FNNLib.dll Syntax public class NetworkScene Properties | Improve this Doc View Source clientMode The client loading mode. If this is single and server mode is additive, this will be offset in space. Declaration public LoadSceneMode clientMode { get; } Property Value Type Description LoadSceneMode | Improve this Doc View Source name The name of the scene Declaration public string name { get; } Property Value Type Description String | Improve this Doc View Source netID This scene's ID. Declaration public uint netID { get; } Property Value Type Description UInt32 | Improve this Doc View Source packingOffset The packing offset given to this scene by the NetworkSceneManager. Declaration public Vector3 packingOffset { get; } Property Value Type Description Vector3 | Improve this Doc View Source scene The scene that we are controlling. Declaration public Scene scene { get; } Property Value Type Description Scene | Improve this Doc View Source serverMode The client loading mode. If this is single and server mode is additive, this will be offset in space. Declaration public LoadSceneMode serverMode { get; } Property Value Type Description LoadSceneMode Methods | Improve this Doc View Source FindObjectsOfType<T>() Find all objects of type in a scene. Can only search for monobehaviours VERY slow on a server or host if you have many scenes. Should only be slightly slower on clients. You're better to use FindObjectsOfType if a client is only on 1 scene, but remember the host! Declaration public T[] FindObjectsOfType<T>() where T : MonoBehaviour Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source Instantiate(GameObject, Vector3, Quaternion) Declaration public GameObject Instantiate(GameObject go, Vector3 position, Quaternion rotation) Parameters Type Name Description GameObject go Vector3 position Quaternion rotation Returns Type Description GameObject"
  },
  "api/FNNLib.SceneManagement.NetworkSceneManager.html": {
    "href": "api/FNNLib.SceneManagement.NetworkSceneManager.html",
    "title": "Class NetworkSceneManager | Friday Night Networking Library",
    "keywords": "Class NetworkSceneManager This manages the scenes across the network. You can only change the scene using the server. On the client, it deals with the scene change packets. When a client joins the server, it will always join into the active scene. If building a party game, ensure the main scene is the lobby. Inheritance Object NetworkSceneManager Namespace : FNNLib.SceneManagement Assembly : FNNLib.dll Syntax public static class NetworkSceneManager Methods | Improve this Doc View Source GetActiveScene() Declaration public static NetworkScene GetActiveScene() Returns Type Description NetworkScene | Improve this Doc View Source GetNetScene(Scene) Declaration public static NetworkScene GetNetScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description NetworkScene | Improve this Doc View Source GetNetScene(UInt32) Declaration public static NetworkScene GetNetScene(uint netID = 0U) Parameters Type Name Description UInt32 netID Returns Type Description NetworkScene | Improve this Doc View Source GetSceneNetID(Scene) Declaration public static uint GetSceneNetID(Scene scene) Parameters Type Name Description Scene scene Returns Type Description UInt32 | Improve this Doc View Source LoadScene(String, LoadSceneMode) Declaration public static NetworkScene LoadScene(string sceneName, LoadSceneMode mode = null) Parameters Type Name Description String sceneName LoadSceneMode mode Returns Type Description NetworkScene | Improve this Doc View Source LoadScene(String, LoadSceneMode, LoadSceneMode) Declaration public static NetworkScene LoadScene(string sceneName, LoadSceneMode serverMode = null, LoadSceneMode clientMode = null) Parameters Type Name Description String sceneName LoadSceneMode serverMode LoadSceneMode clientMode Returns Type Description NetworkScene | Improve this Doc View Source MoveClientToScene(UInt64, UInt32) Declaration public static void MoveClientToScene(ulong clientID, uint sceneID) Parameters Type Name Description UInt64 clientID UInt32 sceneID The scene network ID. Exceptions Type Condition NotSupportedException | Improve this Doc View Source SetActiveScene(NetworkScene) Declaration public static void SetActiveScene(NetworkScene scene) Parameters Type Name Description NetworkScene scene | Improve this Doc View Source SetActiveScene(UInt32) Sets the active/main scene with its index. This is the scene new clients will be sent to. Declaration public static void SetActiveScene(uint netID) Parameters Type Name Description UInt32 netID | Improve this Doc View Source UnloadSceneAsync(UInt32, UInt32) Unload a subscene, redirecting any clients to the fallback scene. TODO: Fallback scene packet so that player position can move. Declaration public static AsyncOperation UnloadSceneAsync(uint netID, uint fallbackScene = 0U) Parameters Type Name Description UInt32 netID UInt32 fallbackScene Returns Type Description AsyncOperation"
  },
  "api/FNNLib.SceneManagement.ScenePackingData.html": {
    "href": "api/FNNLib.SceneManagement.ScenePackingData.html",
    "title": "Class ScenePackingData | Friday Night Networking Library",
    "keywords": "Class ScenePackingData Inheritance Object ScenePackingData Namespace : FNNLib.SceneManagement Assembly : FNNLib.dll Syntax public class ScenePackingData : ScriptableObject Fields | Improve this Doc View Source sceneMinimumBoundary The scene bounds. This configures how the NetworkSceneManager adds additional scenes and where. Declaration public Vector3 sceneMinimumBoundary Field Value Type Description Vector3"
  },
  "api/FNNLib.Serialization.html": {
    "href": "api/FNNLib.Serialization.html",
    "title": "Namespace FNNLib.Serialization | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Serialization Classes NetworkReader Network reader will read data from a buffer into any type. Used for deserializing packets. NetworkReaderPool NetworkWriter NetworkWriterPool PooledNetworkReader PooledNetworkWriter"
  },
  "api/FNNLib.Serialization.NetworkReader.html": {
    "href": "api/FNNLib.Serialization.NetworkReader.html",
    "title": "Class NetworkReader | Friday Night Networking Library",
    "keywords": "Class NetworkReader Network reader will read data from a buffer into any type. Used for deserializing packets. Inheritance Object NetworkReader PooledNetworkReader Namespace : FNNLib.Serialization Assembly : FNNLib.dll Syntax public class NetworkReader Constructors | Improve this Doc View Source NetworkReader(ArraySegment<Byte>) Declaration public NetworkReader(ArraySegment<byte> buffer) Parameters Type Name Description ArraySegment < Byte > buffer | Improve this Doc View Source NetworkReader(Byte[]) Declaration public NetworkReader(byte[] buffer) Parameters Type Name Description Byte [] buffer Fields | Improve this Doc View Source position Reader position Declaration public int position Field Value Type Description Int32 Properties | Improve this Doc View Source length The length of the data buffer. Declaration public int length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ReadBool() Declaration public bool ReadBool() Returns Type Description Boolean | Improve this Doc View Source ReadByte() Read a single byte from the stream. Declaration public byte ReadByte() Returns Type Description Byte Exceptions Type Condition EndOfStreamException | Improve this Doc View Source ReadBytes(Int32) Declaration public byte[] ReadBytes(int count) Parameters Type Name Description Int32 count Returns Type Description Byte [] | Improve this Doc View Source ReadBytesSegment(Int32) Declaration public ArraySegment<byte> ReadBytesSegment(int count) Parameters Type Name Description Int32 count Returns Type Description ArraySegment < Byte > | Improve this Doc View Source ReadBytesWithSize() Declaration public byte[] ReadBytesWithSize() Returns Type Description Byte [] | Improve this Doc View Source ReadDecimal() Declaration public decimal ReadDecimal() Returns Type Description Decimal | Improve this Doc View Source ReadDouble() Declaration public double ReadDouble() Returns Type Description Double | Improve this Doc View Source ReadInt16() Declaration public short ReadInt16() Returns Type Description Int16 | Improve this Doc View Source ReadInt32() Declaration public int ReadInt32() Returns Type Description Int32 | Improve this Doc View Source ReadInt64() Declaration public long ReadInt64() Returns Type Description Int64 | Improve this Doc View Source ReadPackedInt16() Declaration public short ReadPackedInt16() Returns Type Description Int16 | Improve this Doc View Source ReadPackedInt32() Declaration public int ReadPackedInt32() Returns Type Description Int32 | Improve this Doc View Source ReadPackedInt64() Declaration public long ReadPackedInt64() Returns Type Description Int64 | Improve this Doc View Source ReadPackedUInt16() Declaration public ushort ReadPackedUInt16() Returns Type Description UInt16 | Improve this Doc View Source ReadPackedUInt32() Declaration public uint ReadPackedUInt32() Returns Type Description UInt32 | Improve this Doc View Source ReadPackedUInt64() Declaration public ulong ReadPackedUInt64() Returns Type Description UInt64 | Improve this Doc View Source ReadSegmentWithSize() Declaration public ArraySegment<byte>? ReadSegmentWithSize() Returns Type Description Nullable < ArraySegment < Byte >> | Improve this Doc View Source ReadSingle() Declaration public float ReadSingle() Returns Type Description Single | Improve this Doc View Source ReadString() Declaration public string ReadString() Returns Type Description String | Improve this Doc View Source ReadUInt16() Declaration public ushort ReadUInt16() Returns Type Description UInt16 | Improve this Doc View Source ReadUInt32() Declaration public uint ReadUInt32() Returns Type Description UInt32 | Improve this Doc View Source ReadUInt64() Declaration public ulong ReadUInt64() Returns Type Description UInt64 | Improve this Doc View Source ReadVector2() Declaration public Vector2 ReadVector2() Returns Type Description Vector2 | Improve this Doc View Source ReadVector3() Declaration public Vector3 ReadVector3() Returns Type Description Vector3"
  },
  "api/FNNLib.Serialization.NetworkReaderPool.html": {
    "href": "api/FNNLib.Serialization.NetworkReaderPool.html",
    "title": "Class NetworkReaderPool | Friday Night Networking Library",
    "keywords": "Class NetworkReaderPool Inheritance Object NetworkReaderPool Namespace : FNNLib.Serialization Assembly : FNNLib.dll Syntax public static class NetworkReaderPool Properties | Improve this Doc View Source capacity Declaration public static int capacity { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetReader(ArraySegment<Byte>) Declaration public static PooledNetworkReader GetReader(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment Returns Type Description PooledNetworkReader | Improve this Doc View Source GetReader(Byte[]) Declaration public static PooledNetworkReader GetReader(byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description PooledNetworkReader | Improve this Doc View Source Recycle(PooledNetworkReader) Declaration public static void Recycle(PooledNetworkReader reader) Parameters Type Name Description PooledNetworkReader reader"
  },
  "api/FNNLib.Serialization.NetworkWriter.html": {
    "href": "api/FNNLib.Serialization.NetworkWriter.html",
    "title": "Class NetworkWriter | Friday Night Networking Library",
    "keywords": "Class NetworkWriter Inheritance Object NetworkWriter PooledNetworkWriter Namespace : FNNLib.Serialization Assembly : FNNLib.dll Syntax public class NetworkWriter Fields | Improve this Doc View Source MaxStringLength Maximum length of sent strings. Declaration public const int MaxStringLength = 32768 Field Value Type Description Int32 Properties | Improve this Doc View Source length Get the length of the internal data. Declaration public int length { get; } Property Value Type Description Int32 | Improve this Doc View Source Position The position of the writer. Declaration public int Position { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Reset() Reset the writer for another use. Declaration public void Reset() | Improve this Doc View Source ToArray() Declaration public byte[] ToArray() Returns Type Description Byte [] | Improve this Doc View Source ToArraySegment() Declaration public ArraySegment<byte> ToArraySegment() Returns Type Description ArraySegment < Byte > | Improve this Doc View Source WriteBool(Boolean) Declaration public void WriteBool(bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source WriteByte(Byte) Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public void WriteBytes(byte[] values, int offset, int count) Parameters Type Name Description Byte [] values Int32 offset Int32 count | Improve this Doc View Source WriteBytesWithSize(Byte[], Int32, Int32) Declaration public void WriteBytesWithSize(byte[] values, int offset, int count) Parameters Type Name Description Byte [] values Int32 offset Int32 count | Improve this Doc View Source WriteDecimal(Decimal) Declaration public void WriteDecimal(decimal value) Parameters Type Name Description Decimal value | Improve this Doc View Source WriteDouble(Double) Declaration public void WriteDouble(double value) Parameters Type Name Description Double value | Improve this Doc View Source WriteInt16(Int16) Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value | Improve this Doc View Source WriteInt32(Int32) Declaration public void WriteInt32(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source WriteInt64(Int32) Declaration public void WriteInt64(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source WritePackedInt16(Int16) Declaration public void WritePackedInt16(short value) Parameters Type Name Description Int16 value | Improve this Doc View Source WritePackedInt32(Int32) Declaration public void WritePackedInt32(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source WritePackedInt64(Int64) Declaration public void WritePackedInt64(long value) Parameters Type Name Description Int64 value | Improve this Doc View Source WritePackedUInt16(UInt16) Declaration public void WritePackedUInt16(ushort value) Parameters Type Name Description UInt16 value | Improve this Doc View Source WritePackedUInt32(UInt32) Declaration public void WritePackedUInt32(uint value) Parameters Type Name Description UInt32 value | Improve this Doc View Source WritePackedUInt64(UInt64) Declaration public void WritePackedUInt64(ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source WriteSegmentWithSize(ArraySegment<Byte>) Declaration public void WriteSegmentWithSize(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment | Improve this Doc View Source WriteSingle(Single) Declaration public void WriteSingle(float value) Parameters Type Name Description Single value | Improve this Doc View Source WriteString(String) Declaration public void WriteString(string value) Parameters Type Name Description String value | Improve this Doc View Source WriteUInt16(UInt16) Declaration public void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value | Improve this Doc View Source WriteUInt32(UInt32) Declaration public void WriteUInt32(uint value) Parameters Type Name Description UInt32 value | Improve this Doc View Source WriteUInt64(UInt64) Declaration public void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source WriteVector2(Vector2) Declaration public void WriteVector2(Vector2 value) Parameters Type Name Description Vector2 value | Improve this Doc View Source WriteVector3(Vector3) Declaration public void WriteVector3(Vector3 value) Parameters Type Name Description Vector3 value"
  },
  "api/FNNLib.Serialization.NetworkWriterPool.html": {
    "href": "api/FNNLib.Serialization.NetworkWriterPool.html",
    "title": "Class NetworkWriterPool | Friday Night Networking Library",
    "keywords": "Class NetworkWriterPool Inheritance Object NetworkWriterPool Namespace : FNNLib.Serialization Assembly : FNNLib.dll Syntax public static class NetworkWriterPool Properties | Improve this Doc View Source capacity The capacity of the pool. Declaration public static int capacity { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetWriter() Get a pooled NetworkWriter. Declaration public static PooledNetworkWriter GetWriter() Returns Type Description PooledNetworkWriter | Improve this Doc View Source Recycle(PooledNetworkWriter) Declaration public static void Recycle(PooledNetworkWriter writer) Parameters Type Name Description PooledNetworkWriter writer"
  },
  "api/FNNLib.Serialization.PooledNetworkReader.html": {
    "href": "api/FNNLib.Serialization.PooledNetworkReader.html",
    "title": "Class PooledNetworkReader | Friday Night Networking Library",
    "keywords": "Class PooledNetworkReader Inheritance Object NetworkReader PooledNetworkReader Inherited Members NetworkReader.position NetworkReader.length NetworkReader.ReadByte() NetworkReader.ReadBool() NetworkReader.ReadBytes(Int32) NetworkReader.ReadBytesSegment(Int32) NetworkReader.ReadUInt16() NetworkReader.ReadInt16() NetworkReader.ReadUInt32() NetworkReader.ReadInt32() NetworkReader.ReadUInt64() NetworkReader.ReadInt64() NetworkReader.ReadPackedUInt16() NetworkReader.ReadPackedInt16() NetworkReader.ReadPackedUInt32() NetworkReader.ReadPackedInt32() NetworkReader.ReadPackedUInt64() NetworkReader.ReadPackedInt64() NetworkReader.ReadSingle() NetworkReader.ReadDouble() NetworkReader.ReadDecimal() NetworkReader.ReadString() NetworkReader.ReadBytesWithSize() NetworkReader.ReadSegmentWithSize() NetworkReader.ReadVector2() NetworkReader.ReadVector3() Namespace : FNNLib.Serialization Assembly : FNNLib.dll Syntax public class PooledNetworkReader : NetworkReader, IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/FNNLib.Serialization.PooledNetworkWriter.html": {
    "href": "api/FNNLib.Serialization.PooledNetworkWriter.html",
    "title": "Class PooledNetworkWriter | Friday Night Networking Library",
    "keywords": "Class PooledNetworkWriter Inheritance Object NetworkWriter PooledNetworkWriter Inherited Members NetworkWriter.MaxStringLength NetworkWriter.length NetworkWriter.Position NetworkWriter.Reset() NetworkWriter.ToArray() NetworkWriter.ToArraySegment() NetworkWriter.WriteByte(Byte) NetworkWriter.WriteBool(Boolean) NetworkWriter.WriteBytes(Byte[], Int32, Int32) NetworkWriter.WriteUInt16(UInt16) NetworkWriter.WriteInt16(Int16) NetworkWriter.WriteUInt32(UInt32) NetworkWriter.WriteInt32(Int32) NetworkWriter.WriteUInt64(UInt64) NetworkWriter.WriteInt64(Int32) NetworkWriter.WritePackedUInt16(UInt16) NetworkWriter.WritePackedInt16(Int16) NetworkWriter.WritePackedUInt32(UInt32) NetworkWriter.WritePackedInt32(Int32) NetworkWriter.WritePackedUInt64(UInt64) NetworkWriter.WritePackedInt64(Int64) NetworkWriter.WriteSingle(Single) NetworkWriter.WriteDouble(Double) NetworkWriter.WriteDecimal(Decimal) NetworkWriter.WriteString(String) NetworkWriter.WriteBytesWithSize(Byte[], Int32, Int32) NetworkWriter.WriteSegmentWithSize(ArraySegment<Byte>) NetworkWriter.WriteVector2(Vector2) NetworkWriter.WriteVector3(Vector3) Namespace : FNNLib.Serialization Assembly : FNNLib.dll Syntax public class PooledNetworkWriter : NetworkWriter, IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/FNNLib.Spawning.html": {
    "href": "api/FNNLib.Spawning.html",
    "title": "Namespace FNNLib.Spawning | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Spawning Classes SpawnManager"
  },
  "api/FNNLib.Spawning.SpawnManager.html": {
    "href": "api/FNNLib.Spawning.SpawnManager.html",
    "title": "Class SpawnManager | Friday Night Networking Library",
    "keywords": "Class SpawnManager Inheritance Object SpawnManager Namespace : FNNLib.Spawning Assembly : FNNLib.dll Syntax public static class SpawnManager Fields | Improve this Doc View Source spawnedObjects Objects that have been spawned Declaration public static readonly Dictionary<ulong, NetworkIdentity> spawnedObjects Field Value Type Description Dictionary < UInt64 , NetworkIdentity > | Improve this Doc View Source spawnedObjectsList Declaration public static readonly List<NetworkIdentity> spawnedObjectsList Field Value Type Description List < NetworkIdentity > Methods | Improve this Doc View Source GetNetworkedPrefabIndex(UInt64) Declaration public static int GetNetworkedPrefabIndex(ulong hash) Parameters Type Name Description UInt64 hash Returns Type Description Int32"
  },
  "api/FNNLib.Transports.ChannelType.html": {
    "href": "api/FNNLib.Transports.ChannelType.html",
    "title": "Enum ChannelType | Friday Night Networking Library",
    "keywords": "Enum ChannelType Namespace : FNNLib.Transports Assembly : FNNLib.dll Syntax public enum ChannelType Fields Name Description Reliable ReliableFragmentedSequenced ReliableSequenced Unreliable UnreliableSequenced"
  },
  "api/FNNLib.Transports.DefaultChannels.html": {
    "href": "api/FNNLib.Transports.DefaultChannels.html",
    "title": "Class DefaultChannels | Friday Night Networking Library",
    "keywords": "Class DefaultChannels Inheritance Object DefaultChannels Namespace : FNNLib.Transports Assembly : FNNLib.dll Syntax public static class DefaultChannels Fields | Improve this Doc View Source Reliable Declaration public const int Reliable = 0 Field Value Type Description Int32 | Improve this Doc View Source ReliableSequenced Declaration public const int ReliableSequenced = 1 Field Value Type Description Int32 | Improve this Doc View Source Unreliable Declaration public const int Unreliable = 2 Field Value Type Description Int32"
  },
  "api/FNNLib.Transports.html": {
    "href": "api/FNNLib.Transports.html",
    "title": "Namespace FNNLib.Transports | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Transports Classes DefaultChannels MultiplexTransport RufflesTransport TODO: Actually implement. This is simply an example of how a RUDP transport would work. TelepathyTransport Transport using vis2k's Telepathy library. Currently the default transport for FNNLib. I want to write my own, however to get off the ground, using an existing lib is simpler and more supported. Transport This is the prototype API for the new style transports. Will have channeling support for RUDP transports. TODO: Decide if we go down event polling instead of an event when data is recieved. TODO: Adding transport doc describing the best practices. Enums ChannelType"
  },
  "api/FNNLib.Transports.MultiplexTransport.html": {
    "href": "api/FNNLib.Transports.MultiplexTransport.html",
    "title": "Class MultiplexTransport | Friday Night Networking Library",
    "keywords": "Class MultiplexTransport Inheritance Object Transport MultiplexTransport Inherited Members Transport.onClientConnected Transport.onClientDataReceived Transport.onClientDisconnected Transport.onServerStarted Transport.onServerStopped Transport.onServerConnected Transport.onServerDisconnected Transport.onServerDataReceived Namespace : FNNLib.Transports Assembly : FNNLib.dll Syntax public class MultiplexTransport : Transport Fields | Improve this Doc View Source transports The transports that are combined. Declaration public Transport[] transports Field Value Type Description Transport [] Properties | Improve this Doc View Source clientConnected Declaration public override bool clientConnected { get; } Property Value Type Description Boolean Overrides Transport.clientConnected | Improve this Doc View Source serverRunning Declaration public override bool serverRunning { get; } Property Value Type Description Boolean Overrides Transport.serverRunning | Improve this Doc View Source supported Declaration public override bool supported { get; } Property Value Type Description Boolean Overrides Transport.supported Methods | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string hostname) Parameters Type Name Description String hostname Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(ArraySegment<Byte>, Int32) Declaration public override bool ClientSend(ArraySegment<byte> data, int channel = 0) Parameters Type Name Description ArraySegment < Byte > data Int32 channel Returns Type Description Boolean Overrides Transport.ClientSend(ArraySegment<Byte>, Int32) | Improve this Doc View Source ServerDisconnect(UInt64) Declaration public override void ServerDisconnect(ulong clientID) Parameters Type Name Description UInt64 clientID Overrides Transport.ServerDisconnect(UInt64) | Improve this Doc View Source ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) Declaration public override bool ServerSend(List<ulong> clients, ArraySegment<byte> data, int channel = 0) Parameters Type Name Description List < UInt64 > clients ArraySegment < Byte > data Int32 channel Returns Type Description Boolean Overrides Transport.ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) | Improve this Doc View Source ServerShutdown() Declaration public override void ServerShutdown() Overrides Transport.ServerShutdown() | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown()"
  },
  "api/FNNLib.Transports.RufflesTransport.html": {
    "href": "api/FNNLib.Transports.RufflesTransport.html",
    "title": "Class RufflesTransport | Friday Night Networking Library",
    "keywords": "Class RufflesTransport TODO: Actually implement. This is simply an example of how a RUDP transport would work. Inheritance Object Transport RufflesTransport Inherited Members Transport.onClientConnected Transport.onClientDataReceived Transport.onClientDisconnected Transport.onServerStarted Transport.onServerStopped Transport.onServerConnected Transport.onServerDisconnected Transport.onServerDataReceived Namespace : FNNLib.Transports Assembly : FNNLib.dll Syntax public class RufflesTransport : Transport Fields | Improve this Doc View Source channels The channels and their types. The first 3 channels are reserved as defaults. Declaration public ChannelType[] channels Field Value Type Description ChannelType [] | Improve this Doc View Source port The default port. Declaration public int port Field Value Type Description Int32 | Improve this Doc View Source serverBindAddress The address to bind the server to. Declaration public string serverBindAddress Field Value Type Description String Properties | Improve this Doc View Source clientConnected Declaration public override bool clientConnected { get; } Property Value Type Description Boolean Overrides Transport.clientConnected | Improve this Doc View Source serverRunning Declaration public override bool serverRunning { get; } Property Value Type Description Boolean Overrides Transport.serverRunning | Improve this Doc View Source supported Declaration public override bool supported { get; } Property Value Type Description Boolean Overrides Transport.supported Methods | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string hostname) Parameters Type Name Description String hostname Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(ArraySegment<Byte>, Int32) Declaration public override bool ClientSend(ArraySegment<byte> data, int channel = 0) Parameters Type Name Description ArraySegment < Byte > data Int32 channel Returns Type Description Boolean Overrides Transport.ClientSend(ArraySegment<Byte>, Int32) | Improve this Doc View Source ServerDisconnect(UInt64) Declaration public override void ServerDisconnect(ulong clientID) Parameters Type Name Description UInt64 clientID Overrides Transport.ServerDisconnect(UInt64) | Improve this Doc View Source ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) Declaration public override bool ServerSend(List<ulong> clients, ArraySegment<byte> data, int channel = 0) Parameters Type Name Description List < UInt64 > clients ArraySegment < Byte > data Int32 channel Returns Type Description Boolean Overrides Transport.ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) | Improve this Doc View Source ServerShutdown() Declaration public override void ServerShutdown() Overrides Transport.ServerShutdown() | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown()"
  },
  "api/FNNLib.Transports.TelepathyTransport.html": {
    "href": "api/FNNLib.Transports.TelepathyTransport.html",
    "title": "Class TelepathyTransport | Friday Night Networking Library",
    "keywords": "Class TelepathyTransport Transport using vis2k's Telepathy library. Currently the default transport for FNNLib. I want to write my own, however to get off the ground, using an existing lib is simpler and more supported. Inheritance Object Transport TelepathyTransport Inherited Members Transport.onClientConnected Transport.onClientDataReceived Transport.onClientDisconnected Transport.onServerStarted Transport.onServerStopped Transport.onServerConnected Transport.onServerDisconnected Transport.onServerDataReceived Namespace : FNNLib.Transports Assembly : FNNLib.dll Syntax public class TelepathyTransport : Transport Fields | Improve this Doc View Source clientMaxMessageSize Declaration public int clientMaxMessageSize Field Value Type Description Int32 | Improve this Doc View Source clientMaxReceivesPerUpdate Declaration public int clientMaxReceivesPerUpdate Field Value Type Description Int32 | Improve this Doc View Source noDelay Declaration public bool noDelay Field Value Type Description Boolean | Improve this Doc View Source port Declaration public ushort port Field Value Type Description UInt16 | Improve this Doc View Source serverMaxMessageSize Declaration public int serverMaxMessageSize Field Value Type Description Int32 | Improve this Doc View Source serverMaxReceivesPerUpdate Declaration public int serverMaxReceivesPerUpdate Field Value Type Description Int32 Properties | Improve this Doc View Source clientConnected Declaration public override bool clientConnected { get; } Property Value Type Description Boolean Overrides Transport.clientConnected | Improve this Doc View Source serverRunning Declaration public override bool serverRunning { get; } Property Value Type Description Boolean Overrides Transport.serverRunning | Improve this Doc View Source supported Declaration public override bool supported { get; } Property Value Type Description Boolean Overrides Transport.supported Methods | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string hostname) Parameters Type Name Description String hostname Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(ArraySegment<Byte>, Int32) Declaration public override bool ClientSend(ArraySegment<byte> data, int channel) Parameters Type Name Description ArraySegment < Byte > data Int32 channel Returns Type Description Boolean Overrides Transport.ClientSend(ArraySegment<Byte>, Int32) | Improve this Doc View Source GetFNNClientID(Int32, Boolean) Declaration public static ulong GetFNNClientID(int id, bool isServer) Parameters Type Name Description Int32 id Boolean isServer Returns Type Description UInt64 | Improve this Doc View Source ServerDisconnect(UInt64) Declaration public override void ServerDisconnect(ulong clientID) Parameters Type Name Description UInt64 clientID Overrides Transport.ServerDisconnect(UInt64) | Improve this Doc View Source ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) Declaration public override bool ServerSend(List<ulong> clients, ArraySegment<byte> data, int channel = 0) Parameters Type Name Description List < UInt64 > clients ArraySegment < Byte > data Int32 channel Returns Type Description Boolean Overrides Transport.ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) | Improve this Doc View Source ServerShutdown() Declaration public override void ServerShutdown() Overrides Transport.ServerShutdown() | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown()"
  },
  "api/FNNLib.Transports.Transport.html": {
    "href": "api/FNNLib.Transports.Transport.html",
    "title": "Class Transport | Friday Night Networking Library",
    "keywords": "Class Transport This is the prototype API for the new style transports. Will have channeling support for RUDP transports. TODO: Decide if we go down event polling instead of an event when data is recieved. TODO: Adding transport doc describing the best practices. Inheritance Object Transport MultiplexTransport RufflesTransport TelepathyTransport Namespace : FNNLib.Transports Assembly : FNNLib.dll Syntax public abstract class Transport : MonoBehaviour Fields | Improve this Doc View Source onClientConnected Fired when the client connects to the server. Declaration public UnityEvent onClientConnected Field Value Type Description UnityEvent | Improve this Doc View Source onClientDataReceived Fired when receiving data from the server. Parameters: data, channel Declaration public UnityEvent<ArraySegment<byte>, int> onClientDataReceived Field Value Type Description UnityEvent < ArraySegment < Byte >, Int32 > | Improve this Doc View Source onClientDisconnected Fired when the client disconnects from the server. Declaration public UnityEvent onClientDisconnected Field Value Type Description UnityEvent | Improve this Doc View Source onServerConnected Fired when a client connects to the server. Parameters: clientID Declaration public UnityEvent<ulong> onServerConnected Field Value Type Description UnityEvent < UInt64 > | Improve this Doc View Source onServerDataReceived Fired when the server recieves data from a client. Parameters: clientID, data, channelID Declaration public UnityEvent<ulong, ArraySegment<byte>, int> onServerDataReceived Field Value Type Description UnityEvent < UInt64 , ArraySegment < Byte >, Int32 > | Improve this Doc View Source onServerDisconnected Fired when a client disconnects from the server. Parameters: clientID Declaration public UnityEvent<ulong> onServerDisconnected Field Value Type Description UnityEvent < UInt64 > | Improve this Doc View Source onServerStarted Declaration public UnityEvent onServerStarted Field Value Type Description UnityEvent | Improve this Doc View Source onServerStopped Declaration public UnityEvent onServerStopped Field Value Type Description UnityEvent Properties | Improve this Doc View Source clientConnected Whether the client is connected to the server. Declaration public abstract bool clientConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source serverRunning Whether the server is running. Declaration public abstract bool serverRunning { get; } Property Value Type Description Boolean | Improve this Doc View Source supported Whether or not the transport is supported on this target platform. Declaration public abstract bool supported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ClientConnect(String) Connect the client to the server. Declaration public abstract void ClientConnect(string hostname) Parameters Type Name Description String hostname The server's hostname | Improve this Doc View Source ClientDisconnect() Disconnect the client from the server. Declaration public abstract void ClientDisconnect() | Improve this Doc View Source ClientSend(ArraySegment<Byte>, Int32) Send data to the server. Declaration public abstract bool ClientSend(ArraySegment<byte> data, int channel = 0) Parameters Type Name Description ArraySegment < Byte > data The data to send. Int32 channel The channel to send the data down. Default = 0. Ignored on Transports that don't support channelling. Returns Type Description Boolean Whether the data was sent/queued to send. | Improve this Doc View Source ServerDisconnect(UInt64) Force disconnect client. Declaration public abstract void ServerDisconnect(ulong clientID) Parameters Type Name Description UInt64 clientID Client to force disconnect. Remarks You should use the higher level NetworkServer disconnect system, as that allows disconnection reasons. This is a last resort which is used by NetworkServer disconnect if the client doesn't honour it. | Improve this Doc View Source ServerSend(List<UInt64>, ArraySegment<Byte>, Int32) Send data to clients. Declaration public abstract bool ServerSend(List<ulong> clients, ArraySegment<byte> data, int channel = 0) Parameters Type Name Description List < UInt64 > clients The clients to send to. ArraySegment < Byte > data The data to send. Int32 channel The channel to send the data down. Ignored on Transports that don't support channelling. Returns Type Description Boolean Whether the data could be sent. | Improve this Doc View Source ServerShutdown() Stop the server. Declaration public abstract void ServerShutdown() | Improve this Doc View Source ServerStart() Start the server. Declaration public abstract void ServerStart() | Improve this Doc View Source Shutdown() Shutdown both client and server. Declaration public abstract void Shutdown()"
  },
  "api/FNNLib.Utilities.Hashing.html": {
    "href": "api/FNNLib.Utilities.Hashing.html",
    "title": "Class Hashing | Friday Night Networking Library",
    "keywords": "Class Hashing FNV-1 Hashing. https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function Learned about this from MLAPI. Inheritance Object Hashing Namespace : FNNLib.Utilities Assembly : FNNLib.dll Syntax public static class Hashing Fields | Improve this Doc View Source FNV_offset_basis32 Declaration public const uint FNV_offset_basis32 = 2166136261U Field Value Type Description UInt32 | Improve this Doc View Source FNV_offset_basis64 Declaration public const ulong FNV_offset_basis64 = 14695981039346656037UL Field Value Type Description UInt64 | Improve this Doc View Source FNV_prime32 Declaration public const uint FNV_prime32 = 16777619U Field Value Type Description UInt32 | Improve this Doc View Source FNV_prime64 Declaration public const ulong FNV_prime64 = 1099511628211UL Field Value Type Description UInt64 Methods | Improve this Doc View Source GetStableHash16(Byte[]) Declaration public static ushort GetStableHash16(this byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description UInt16 | Improve this Doc View Source GetStableHash16(String) Declaration public static ushort GetStableHash16(this string text) Parameters Type Name Description String text Returns Type Description UInt16 | Improve this Doc View Source GetStableHash32(Byte[]) Declaration public static uint GetStableHash32(this byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description UInt32 | Improve this Doc View Source GetStableHash32(String) Declaration public static uint GetStableHash32(this string text) Parameters Type Name Description String text Returns Type Description UInt32 | Improve this Doc View Source GetStableHash64(Byte[]) Declaration public static ulong GetStableHash64(this byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description UInt64 | Improve this Doc View Source GetStableHash64(String) Declaration public static ulong GetStableHash64(this string text) Parameters Type Name Description String text Returns Type Description UInt64"
  },
  "api/FNNLib.Utilities.html": {
    "href": "api/FNNLib.Utilities.html",
    "title": "Namespace FNNLib.Utilities | Friday Night Networking Library",
    "keywords": "Namespace FNNLib.Utilities Classes Hashing FNV-1 Hashing. https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function Learned about this from MLAPI."
  },
  "index.html": {
    "href": "index.html",
    "title": "Friday Night Networking Library | Friday Night Networking Library",
    "keywords": "Friday Night Networking Library A work in progress networking solution for Unity, with a focus on extensibility and ease of use. Current features A basic client-server implementation with the ability to send and recieve packets through the basic TCP Transport A simple to understand and extensible transport system, allowing the integration of many networking pipelines. Networking capabilities/features can be extended beyond the offerings of the library with raw access to the packet system and serialization. Current goals Server's will support clients all on different scenes at different times. Good for party games. API will aim to be simple enough that no networking code has to be written, all you'll need are some NetworkBehaviours, checking if you're client or server (and of course a GUI of some form activating the NetworkManager). Possible future goals Completely rewritten TCP Transport (Currently we're using a variant of Mirror's Telepathy) Single player support (sounds silly, but adding the option for host mode without running a server listener is actually a good idea, takes th eload off devs that intend on developing a single and muliplayer game.)"
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | Friday Night Networking Library",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Friday Night Networking Library",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}